

name: Java Maven Build & Publish Artifact

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  #SPRINT_NUMBER: "32.6.0" # Définissez votre numéro de sprint ici
  # Ou extrayez-le dynamiquement si votre branche de release le contient
  SPRINT_NUMBER: ${{ github.ref_name }} # Si le nom de votre branche est '32.6.0' par exemple
  ARTIFACTORY_URL: 'https://trialcptx99.jfrog.io/ui/native/identityiq-libs-snapshot/com/jfrog/my-jfrog-app'
  ARTIFACTORY_REPO: '1.0-SNAPSHOT' # Nom du dépôt Artifactory pour les fichiers génériques (créez-en un si besoin)
jobs:
  build_test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: some test
      run: |
        echo "mamadou"
        ls -l
  
  publish-job:
    runs-on: ubuntu-latest
    needs: build_test
    if: github.event_name == 'push' # Cest la condition clé !
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Installer java
        uses: actions/setup-java@v3
        with: 
          java-version: '17'
          distribution: 'temurin'
      - name: vérifier le snapchot avec maven
        run: mvn --batch-mode --update-snapshots verify
      - name: création du dossier et copie des données de l'artefact
        run: |
          ls -l
          echo "contenu du target"
          ls target
          mkdir staging && cp target/*.jar staging
      - name: Simuler la création du packag IIQ
        id: set_package_name
        run: |
          # Obtenez un horodatage unique (secondes depuis l'époque)
          TIMESTAMP=$(date +%s)
          # Combinez le nom de base, le numéro de sprint, le numéro d'exécution et l'horodatage
          # Cela rend le nom très unique et facile à suivre
          PACKAGE_NAME="identityiq-${{ env.SPRINT_NUMBER }}.${{ github.run_number }}-${TIMESTAMP}"
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
      - name: Télécharger l'artéfact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set_package_name.outputs.package_name }}
          path: staging
      - name: Publish generic package to Artifactory
        run: |
          # Construisez l'URL de destination dans Artifactory
          # Exemple: http://your-artifactory-url:8081/artifactory/generic-local/path/to/your/package-name.zip
          DESTINATION_URL="${{ env.ARTIFACTORY_URL }}/${{ env.ARTIFACTORY_REPO }}/${{ steps.set_package_name.outputs.package_name }}"
          
          echo "Déploiement de ${{ steps.set_package_name.outputs.package_name }} vers ${DESTINATION_URL}"

          # Utilisez curl pour uploader le fichier
          curl -u "${{ secrets.ARTIFACTORY_USERNAME }}:${{ secrets.ARTIFACTORY_PASSWORD }}" \
                -X PUT "${DESTINATION_URL}" \
                -T "${{ steps.set_package_name.outputs.package_name }}" \
                -H "X-Checksum-Sha1: $(sha1sum ${{ steps.set_package_name.outputs.package_name }} | awk '{print $1}')" \
                -H "X-Checksum-Md5: $(md5sum ${{ steps.set_package_name.outputs.package_name }} | awk '{print $1}')"
        shell: bash


